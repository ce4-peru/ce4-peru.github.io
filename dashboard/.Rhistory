pos.imp.new = abs(pos.imp - pos.imp.lag),
pas.new = abs(pas - pas.lag),
smp.new = abs(smp - smp.lag),
ratio.new = round(pos.new/smp.new), digits = 3)
## Regions geometry
shp <- st_read("Limite_departamental", stringsAsFactors = F)
shp <- shp %>%
st_transform(4326) %>%
select(Departamento = NOMBDEP)
# Append
dep <- merge(dep, shp, by.y = 'Departamento', by.x = 'dep', all.x = T)
dep <- st_as_sf(dep, sf_column_name = 'geometry')
## aes
pal_fun <- colorQuantile("YlOrRd", NULL, n = 5)
pal_smp <- colorQuantile("Blues", NULL, n = 5)
labels.total <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$pos) %>% lapply(htmltools::HTML)
labels.new <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$pos.new) %>% lapply(htmltools::HTML)
labels.pas <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep[dep$pas > 0,]$dep, dep[dep$pas > 0,]$pas) %>% lapply(htmltools::HTML)
labels.smp <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$smp) %>% lapply(htmltools::HTML)
labels.smp.new <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$smp.new) %>% lapply(htmltools::HTML)
labels.ratio <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$ratio.new) %>% lapply(htmltools::HTML)
pal.ratio <-  colorNumeric( palette="Blues", domain = dep$ratio.new, na.color="transparent")
leaflet(dep) %>%
addTiles(urlTemplate = 'http://a.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addPolygons(fillColor = pal.ratio(dep$ratio.new),
weight = 2,
opacity = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels.ratio,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomleft", pal=pal.ratio, values = dep$ratio.new, title= 'Tasa de positivos nuevos')
c.date <- max(deps$Fecha)
dep <-
deps %>%
dplyr::select(dat = Fecha,
dep = REGION,
pos = Positivos_totales,
pos.imp = PositivosImputados_totales,
pas =Fallecidos,
smp =Total_muestras) %>%
mutate(pas = pas %>% if_else(is.na(.), 0, .)) %>%
group_by(dep) %>%
mutate(pos.lag = lag(pos, n = 1),
pos.imp.lag = lag(pos.imp, n = 1),
pas.lag = lag(pas, n = 1),
smp.lag = lag(smp, n = 1)) %>%
filter(dat == c.date) %>%
mutate(pos.new = abs(pos - pos.lag),
pos.imp.new = abs(pos.imp - pos.imp.lag),
pas.new = abs(pas - pas.lag),
smp.new = abs(smp - smp.lag),
ratio.new = signif(pos.new/smp.new), digits = 3)
## Regions geometry
shp <- st_read("Limite_departamental", stringsAsFactors = F)
shp <- shp %>%
st_transform(4326) %>%
select(Departamento = NOMBDEP)
# Append
dep <- merge(dep, shp, by.y = 'Departamento', by.x = 'dep', all.x = T)
dep <- st_as_sf(dep, sf_column_name = 'geometry')
## aes
pal_fun <- colorQuantile("YlOrRd", NULL, n = 5)
pal_smp <- colorQuantile("Blues", NULL, n = 5)
labels.total <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$pos) %>% lapply(htmltools::HTML)
labels.new <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$pos.new) %>% lapply(htmltools::HTML)
labels.pas <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep[dep$pas > 0,]$dep, dep[dep$pas > 0,]$pas) %>% lapply(htmltools::HTML)
labels.smp <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$smp) %>% lapply(htmltools::HTML)
labels.smp.new <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$smp.new) %>% lapply(htmltools::HTML)
labels.ratio <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$ratio.new) %>% lapply(htmltools::HTML)
pal.ratio <-  colorNumeric( palette="Blues", domain = dep$ratio.new, na.color="transparent")
leaflet(dep) %>%
addTiles(urlTemplate = 'http://a.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addPolygons(fillColor = pal.ratio(dep$ratio.new),
weight = 2,
opacity = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels.ratio,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomleft", pal=pal.ratio, values = dep$ratio.new, title= 'Tasa de positivos nuevos')
pal.pas <- colorNumeric( palette="YlOrRd", domain = dep[dep$pas > 0,]$pas, na.color="transparent")
leaflet(dep) %>%
addTiles(urlTemplate = 'http://a.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addPolygons(fillColor = pal.pas(dep$pas),
weight = 2,
opacity = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels.pas,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomleft", pal=pal.pas, values = dep$pas, title= 'Cantidad de fallecidos')
labels.pas <- sprintf(
"<strong>%s</strong><br/<strong>Value: </strong>%s",
dep$dep, dep$pas) %>% lapply(htmltools::HTML)
pal.pas <- colorNumeric( palette="YlOrRd", domain = dep$pas, na.color="transparent")
leaflet(dep) %>%
addTiles(urlTemplate = 'http://a.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
addPolygons(fillColor = pal.pas(dep$pas),
weight = 2,
opacity = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels.pas,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomleft", pal=pal.pas, values = dep$pas, title= 'Cantidad de fallecidos')
nac <- rio::import("https://github.com/jincio/COVID_19_PERU/blob/master/docs/reportes_minsa.xlsx?raw=true")
deps <- rio::import("https://github.com/jincio/COVID_19_PERU/blob/master/docs/reportes_minsa.xlsx?raw=true", sheet = 2)
pop <- read_csv("data/peru_pop_stratum.csv") %>%
group_by(dep_adm1) %>%
dplyr::summarise(pop = sum(N)) %>%
mutate(REGION = toupper(dep_adm1))
library(flexdashboard)
library(rio)
library(tidyverse)
library(XML)
library(httr)
library(RCurl)
library(sf)
library(lubridate)
library(leaflet)
library(colorspace)
library(DT)
library(zoo)
library(slider)
library(plotly)
options(scipen=999)
nac <- rio::import("https://github.com/jincio/COVID_19_PERU/blob/master/docs/reportes_minsa.xlsx?raw=true")
deps <- rio::import("https://github.com/jincio/COVID_19_PERU/blob/master/docs/reportes_minsa.xlsx?raw=true", sheet = 2)
pop <- read_csv("data/peru_pop_stratum.csv") %>%
group_by(dep_adm1) %>%
dplyr::summarise(pop = sum(N)) %>%
mutate(REGION = toupper(dep_adm1))
c.date <- max(deps$Fecha)
dep <-
deps %>%
dplyr::select(dat = Fecha,
dep = REGION,
pos = Positivos_totales,
pos.imp = PositivosImputados_totales,
pas =Fallecidos,
smp =Total_muestras) %>%
mutate(pas = pas %>% if_else(is.na(.), 0, .)) %>%
group_by(dep) %>%
mutate(pos.lag = lag(pos, n = 1),
pos.imp.lag = lag(pos.imp, n = 1),
pas.lag = lag(pas, n = 1),
smp.lag = lag(smp, n = 1)) %>%
filter(dat == c.date) %>%
mutate(pos.new = abs(pos - pos.lag),
pos.imp.new = abs(pos.imp - pos.imp.lag),
pas.new = abs(pas - pas.lag),
smp.new = abs(smp - smp.lag),
ratio.new = signif(pos.new/smp.new), digits = 3)
## Regions geometry
shp <- st_read("Limite_departamental", stringsAsFactors = F)
shp <- shp %>%
st_transform(4326) %>%
select(Departamento = NOMBDEP)
# Append
dep <- merge(dep, shp, by.y = 'Departamento', by.x = 'dep', all.x = T)
dep <- st_as_sf(dep, sf_column_name = 'geometry')
install.packages('waffle')
install.packages('extrafont')
library(waffle)
library(extrafont)
font_import()
# check that Font Awesome is imported
fonts()[grep("Awesome", fonts())]
font_import()
waffle(c(50, 30, 15, 5), rows = 5, title = "Your basic waffle chart")
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "child", glyph_size = 6,
title = "Look I made an infographic using R!")
fonts()[grep("Awesome", fonts())]
loadfonts()
fonts()[grep("Awesome", fonts())]
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "child", glyph_size = 6,
title = "Look I made an infographic using R!")
font_import()
c(`Mortgage ($84,911)`=84911, `Auto andntuition loans ($14,414)`=14414,
`Home equity loans ($10,062)`=10062, `Credit Cards ($8,565)`=8565)
nac
c.date <- max(deps$Fecha)
dep <-
deps %>%
dplyr::select(dat = Fecha,
dep = REGION,
pos = Positivos_totales,
pos.imp = PositivosImputados_totales,
pas =Fallecidos,
smp =Total_muestras) %>%
mutate(pas = pas %>% if_else(is.na(.), 0, .)) %>%
group_by(dep) %>%
mutate(pos.lag = lag(pos, n = 1),
pos.imp.lag = lag(pos.imp, n = 1),
pas.lag = lag(pas, n = 1),
smp.lag = lag(smp, n = 1)) %>%
filter(dat == c.date) %>%
mutate(pos.new = abs(pos - pos.lag),
pos.imp.new = abs(pos.imp - pos.imp.lag),
pas.new = abs(pas - pas.lag),
smp.new = abs(smp - smp.lag),
ratio.new = signif(pos.new/smp.new), digits = 3)
## Regions geometry
shp <- st_read("Limite_departamental", stringsAsFactors = F)
shp <- shp %>%
st_transform(4326) %>%
select(Departamento = NOMBDEP)
# Append
dep <- merge(dep, shp, by.y = 'Departamento', by.x = 'dep', all.x = T)
dep <- st_as_sf(dep, sf_column_name = 'geometry')
dep
test <- dep %>%
select(Region = dep,
`Total de casos` = pos,
`Total de fallecidos` = pas,
`Total de muestras` = smp) %>%
arrange(desc(`Total de casos`)) %>%
st_set_geometry(NULL)
c(test$Region, test$`Total de casos`)
c(test$Region = test$`Total de casos`)
list(test[, c('Region', '`Total de casos`')])
list(test[, c('Region', 'Total de casos')])
waffle(list(test[, c('Region', 'Total de casos')]), rows=7, size=0.5,
colors=c("#c7d4b6", "#a3aabd", "#a0d0de", "#97b5cf"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
c(test[, c('Region', 'Total de casos')])
DT::datatable(dep %>%
select(Region = dep,
`Total de casos` = pos,
`Total de fallecidos` = pas,
`Total de muestras` = smp) %>%
arrange(desc(`Total de casos`)) %>%
st_set_geometry(NULL),
options = list(
bPaginate = FALSE,
dom = 't'
))
DT::datatable(dep %>%
select(Region = dep,
`Total de casos` = pos,
`Total de fallecidos` = pas,
`Total de muestras` = smp) %>%
arrange(desc(`Total de casos`)) %>%
st_set_geometry(NULL),
options = list(
bPaginate = FALSE,
dom = 't',
JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
"}")
))
dep %>%
select(Region = dep,
`Total de casos` = pos,
`Total de fallecidos` = pas,
`Total de muestras` = smp) %>%
arrange(desc(`Total de casos`)) %>%
st_set_geometry(NULL) %>%
DT::datatable(options = list(
bPaginate = FALSE,
dom = 't'
)) %>% formatStyle(backgroundColor = 'black')
dep %>%
select(Region = dep,
`Total de casos` = pos,
`Total de fallecidos` = pas,
`Total de muestras` = smp) %>%
arrange(desc(`Total de casos`)) %>%
st_set_geometry(NULL) %>%
DT::datatable(options = list(
bPaginate = FALSE,
dom = 't'
)) %>% formatStyle(columns = c('Region', '`Total de casos`', '`Total de fallecidos`', '`Total de muestras`'),
backgroundColor = 'black')
dep %>%
select(Region = dep,
`Total de casos` = pos,
`Total de fallecidos` = pas,
`Total de muestras` = smp) %>%
arrange(desc(`Total de casos`)) %>%
st_set_geometry(NULL) %>%
DT::datatable(options = list(
bPaginate = FALSE,
dom = 't'
)) %>% formatStyle(columns = c('Region', 'Total de casos', 'Total de fallecidos', 'Total de muestras'),
backgroundColor = 'black')
dep %>% select(dep, pos) %>%
mutate(pos = round(pos/sum(pos)))
dep %>% select(dep, pos) %>%
st_set_geometry(NULL) %>%
mutate(pos = round(pos/sum(pos)))
dep %>% select(dep, pos) %>%
st_set_geometry(NULL) %>%
mutate(pos = round((pos/sum(pos))*100))
dep %>% select(dep, pos) %>%
st_set_geometry(NULL) %>%
mutate(pos = round((pos/sum(pos))*100),
sum = sum(pos))
dep %>% select(dep, pos) %>%
st_set_geometry(NULL) %>%
mutate(pos = round((pos/sum(pos))*100)) %>%
waffle(rows = 5, title = "Your basic waffle chart")
dep %>% select(dep, pos) %>%
st_set_geometry(NULL) %>%
mutate(pos = as.integer(round((pos/sum(pos))*100))) %>%
waffle(rows = 5, title = "Your basic waffle chart")
waffle(data.frame(names = c('Boys','Girls'), vals = c(20,20)), rows = 5, title = "Your basic waffle chart")
library(flexdashboard)
library(rio)
library(tidyverse)
library(XML)
library(httr)
library(RCurl)
library(sf)
library(lubridate)
library(leaflet)
library(colorspace)
library(DT)
library(zoo)
library(slider)
library(plotly)
library(waffle)
library(extrafont)
options(scipen=999)
nac <- rio::import("https://github.com/jincio/COVID_19_PERU/blob/master/docs/reportes_minsa.xlsx?raw=true")
deps <- rio::import("https://github.com/jincio/COVID_19_PERU/blob/master/docs/reportes_minsa.xlsx?raw=true", sheet = 2)
pop <- read_csv("data/peru_pop_stratum.csv") %>%
group_by(dep_adm1) %>%
dplyr::summarise(pop = sum(N)) %>%
mutate(REGION = toupper(dep_adm1))
c.date <- max(deps$Fecha)
dep <-
deps %>%
dplyr::select(dat = Fecha,
dep = REGION,
pos = Positivos_totales,
pos.imp = PositivosImputados_totales,
pas =Fallecidos,
smp =Total_muestras) %>%
mutate(pas = pas %>% if_else(is.na(.), 0, .)) %>%
group_by(dep) %>%
mutate(pos.lag = lag(pos, n = 1),
pos.imp.lag = lag(pos.imp, n = 1),
pas.lag = lag(pas, n = 1),
smp.lag = lag(smp, n = 1)) %>%
filter(dat == c.date) %>%
mutate(pos.new = abs(pos - pos.lag),
pos.imp.new = abs(pos.imp - pos.imp.lag),
pas.new = abs(pas - pas.lag),
smp.new = abs(smp - smp.lag),
ratio.new = signif(pos.new/smp.new), digits = 3)
## Regions geometry
shp <- st_read("Limite_departamental", stringsAsFactors = F)
shp <- shp %>%
st_transform(4326) %>%
select(Departamento = NOMBDEP)
# Append
dep <- merge(dep, shp, by.y = 'Departamento', by.x = 'dep', all.x = T)
dep <- st_as_sf(dep, sf_column_name = 'geometry')
waffle(data.frame(names = c('Boys','Girls'), vals = c(20,20)), rows = 5, title = "Your basic waffle chart")
dep %>% select(dep, pos) %>%
st_set_geometry(NULL) %>%
mutate(pos = as.integer(round((pos/sum(pos))*100))) %>%
waffle(rows = 5, title = "Your basic waffle chart")
waffle(c(50,20), rows = 5, title = "Your basic waffle chart")
dep %>% select(dep, pos) %>%
st_set_geometry(NULL) %>%
mutate(pos = as.integer(round((pos/sum(pos))*100)))
dep %>% select(as.character(dep), pos) %>%
st_set_geometry(NULL) %>%
mutate(pos = as.integer(round((pos/sum(pos))*100)))
dep %>%
st_set_geometry(NULL) %>%
select(as.factor(dep), pos) %>%
mutate(pos = as.integer(round((pos/sum(pos))*100)))
dep %>%
st_set_geometry(NULL) %>%
select(dep, pos) %>%
mutate(pos = as.integer(round((pos/sum(pos))*100)),
dep = as.factor(dep))
dep %>%
st_set_geometry(NULL) %>%
select(dep, pos) %>%
mutate(pos = as.integer(round((pos/sum(pos))*100)),
dep = as.factor(dep)) %>%
waffle(rows = 5, title = "Your basic waffle chart")
library(devtools)
install_github("hrbrmstr/waffle")
library(flexdashboard)
library(rio)
library(tidyverse)
library(XML)
library(httr)
library(RCurl)
library(sf)
library(lubridate)
library(leaflet)
library(colorspace)
library(DT)
library(zoo)
library(slider)
library(plotly)
library(waffle)
library(extrafont)
options(scipen=999)
nac <- rio::import("https://github.com/jincio/COVID_19_PERU/blob/master/docs/reportes_minsa.xlsx?raw=true")
deps <- rio::import("https://github.com/jincio/COVID_19_PERU/blob/master/docs/reportes_minsa.xlsx?raw=true", sheet = 2)
pop <- read_csv("data/peru_pop_stratum.csv") %>%
group_by(dep_adm1) %>%
dplyr::summarise(pop = sum(N)) %>%
mutate(REGION = toupper(dep_adm1))
c.date <- max(deps$Fecha)
dep <-
deps %>%
dplyr::select(dat = Fecha,
dep = REGION,
pos = Positivos_totales,
pos.imp = PositivosImputados_totales,
pas =Fallecidos,
smp =Total_muestras) %>%
mutate(pas = pas %>% if_else(is.na(.), 0, .)) %>%
group_by(dep) %>%
mutate(pos.lag = lag(pos, n = 1),
pos.imp.lag = lag(pos.imp, n = 1),
pas.lag = lag(pas, n = 1),
smp.lag = lag(smp, n = 1)) %>%
filter(dat == c.date) %>%
mutate(pos.new = abs(pos - pos.lag),
pos.imp.new = abs(pos.imp - pos.imp.lag),
pas.new = abs(pas - pas.lag),
smp.new = abs(smp - smp.lag),
ratio.new = signif(pos.new/smp.new), digits = 3)
## Regions geometry
shp <- st_read("Limite_departamental", stringsAsFactors = F)
shp <- shp %>%
st_transform(4326) %>%
select(Departamento = NOMBDEP)
# Append
dep <- merge(dep, shp, by.y = 'Departamento', by.x = 'dep', all.x = T)
dep <- st_as_sf(dep, sf_column_name = 'geometry')
dep %>%
st_set_geometry(NULL) %>%
select(dep, pos) %>%
mutate(pos = as.integer(round((pos/sum(pos))*100))) %>%
waffle(rows = 5, title = "Your basic waffle chart")
